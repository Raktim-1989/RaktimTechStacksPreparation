maven interview questions

What is a build tool?
A build tool takes care of everything of building a process . it includes -
1. generate the source code and its documentation
2. compiles the source code
3. It performs convention over configuration //it menas it customizes the project structure tool
4. it deploys the packaged compied code into local repo , central repo. 

version of a software 
20.3.5
Major change.minor change.patch

pom.xml contains following -
1. metadata
2.dependencies
3.kind of project   //.war , .jar
4.kind of Output    
5. description  

diff between maven & ANT
1. Maven is a framework i.e convention over configuration , but ANT is not , its a tool
2. Maven is mainly a project management tool where ANT is a build tool. 


1. Surefire plugin: is used to test the test cases from pom.xml
<build>
<pluginmanagement>
<plugins>
<plugin>
<groupId>org.apache.maven.plugins</groupId>
<artifactId>maven-surefire-plugin</artifactId>
<version>2.20.1</version>
</plugin>
</plugins>
</pluginmanagement>
</build>


2. TestNG integration with Maven pom.xml

<plugins>
<plugin>
<groupId>org.apache.maven.plugins</groupId>
<artifactId>maven-surefire-plugin</artifactId>
<version>2.20.1</version>
<configuration>
<suiteXmlFiles>
<suiteXmlFile>testng.xml</suiteXmlFile>
</suiteXmlFiles>
</configuration>
</plugin>
</plugins>

3. Switching the tests with maven profiling

<profiles>
**********profile for regression***********
<profile>
<id>Regression</id>
<build>
<pluginmanagement>
<plugins>
<plugin>
<groupId>org.apache.maven.plugins</groupId>
<artifactId>maven-surefire-plugin</artifactId>
<version>2.20.1</version>
<configuration>
<suiteXmlFiles>
<suiteXmlFile>testng2.xml</suiteXmlFile>
</suiteXmlFiles>
</configuration>
</plugin>
</plugins>
</pluginmanagement>
</build>
</profile>
*************profile for smoke**********
<profile>
<id>Smoke</id>
<build>
<pluginmanagement>
<plugins>
<plugin>
<groupId>org.apache.maven.plugins</groupId>
<artifactId>maven-surefire-plugin</artifactId>
<version>2.20.1</version>
<configuration>
<suiteXmlFiles>
<suiteXmlFile>testng2.xml</suiteXmlFile>
</suiteXmlFiles>
</configuration>
</plugin>
</plugins>
</pluginmanagement>
</build>
</profile>
</profiles>

command: mvn test -PRegression

cycle:
verify -> compile -> test -> package -> validate -> install -> deploy

*******************************************************************************
### HOW TO USE MAVEN PROJECT AS DEPENDENCY OF ONE PROJECT INTO ANOTHER
Step1: pom.xml for Project1
<build>
  <plugins>
     <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId><maven-jar-plugin></artifactId>
        <version>3.2.0</version>
        <executions>
          <execution>
             <goals>
               <goal>test-jar</goal>
             </goals>
          </execution>
        </executions>
        <configuration>
           <finalName>ProjectJARs/project</finalName>
        </configuration>
     </plugin>
  </plugins>
</build>

Step2: mvn install 
i. target/ProjectJARs : Project jar (classes from src/main/java) and 
                        Project-Tests jar (classes from src/test/java)
ii. .m2 repository : main classes jar (artifactid-version)
                     test classes jar (artifactid-version-tests)

Step3: Now go to project2 and add project1 as dependency in project2
      //the first dependency is to use classes from src/main/java
      //the second dependency is to use classes from src/test/java
<dependencies>
  <dependency>
      <groupId>ProjectGroup1</groupId>
      <artifactId>Project1</artifactId>
      <version>0.0.1-SNAPSHOT</version>
      <scope>compile</scope>
  </dependency>
  <dependency>
      <groupId>ProjectGroup1</groupId>
      <artifactId>Project1</artifactId>
      <version>0.0.1-SNAPSHOT</version>
      <scope>test</scope>
      <type>test-jar</type>
      <classifier>test</classifier>
  </dependency>
</dependencies>

### How to skip tets cases in maven ###

Approach1:
<properties>
  <skipTests>true</skipTests>
</properties>
//no test case should be executd if we integrate the abobve properties in pom.xml 

Approach2:
customize your surefire plugin
<build>
  <plugins>
     <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>3.0.0.-M5</version>
        <configuration>
          <skipTests>${skipTests}</skipTests>
        </configuration>
     </plugin>
  </plugins>
 </build> 

 command : mvn -DskipTests install
 --if you want to run the gtest cases
 mvn -DskipTests=false install 

 ### How to create jar file in maven project and use that jar in another project ###
  -- add the jar plugin in pom.xml 
  <build>
  <plugins>
     <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId><maven-jar-plugin></artifactId>
        <version>3.2.0</version>
        <executions>
          <execution>
             <goals>
               <goal>test-jar</goal>
             </goals>
          </execution>
        </executions>
        <configuration>
           <finalName>ProjectJARs/project</finalName>
        </configuration>
     </plugin>
  </plugins>
</build>

target/ProjectJARs -> 
1. project.jar : this jar will contain classes from src/main/java 
2. project-tests.jar : this jar will contain test classes from src/test/java

mvn package 

//use java Decompiler (JDDCompiler) to check contents of jar file

---- Now reuse the above jars in another project 
Go to project2 -> Right Click -> Build path -> Add External Archives -> select above jars
********************************************************************************
### How to run multiple tests parallel ###
Case1: parallel in @Test level in same class i.e. m1() & m2() will run in parallel
class1
{
   @Test
   public void m1(){}
   @Test
   public void m2(){}

}

1. Add property & surefire plugin

<build>
  <plugins>
     <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>3.0.0.-M5</version>
        <configuration>
          <parallel>methods</parallel>
          <threadCount>10</threadCount>
          <redirectTestOutputToFile>false</redirectTestOutputToFile>
          <suiteXmlFiles>
             <suiteXmlFile>testng.xml</suiteXmlFile>
          </suiteXmlFiles>
        </configuration>
     </plugin>
  </plugins>
 </build> 

Case2: Run the classes in following way
class1{
    @Test
    public void m1()
    {

    }
    @Test
    public void m2()
    {

    }

}

class2
{
    @Test
    public void m3()
    {

    }
    @Test
    public void m4()
    {

    }
}
//pom.xml will be configured in such a way that m1() & m3() will run in parallel first , afterwards m2() 
& m4() will run in parallel

<build>
  <plugins>
     <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>3.0.0.-M5</version>
        <configuration>
          <parallel>methods</parallel>
          <threadCount>10</threadCount>
          <redirectTestOutputToFile>false</redirectTestOutputToFile>
          <suiteXmlFiles>
             <suiteXmlFile>testng.xml</suiteXmlFile>
          </suiteXmlFiles>
        </configuration>
     </plugin>
  </plugins>
 </build> 

 Output : m1()
          m3()
          m2()
          m4()

********************************************************
### How to pass parameters at run time via maven ###

Flow will be like the folliwing -->
mvn command --> pom.xml --> propertiesFile --> javaclass(LoginTest.java)

1. In pom.xml configure as following--
<properties>
<username>usernameValue</username>
<password>passwordValue</password>
</properties>
<build>
  <testResources>
    <testResource>
      <directory>src/test/resources</directory>
      <filtering>true</filtering>
    </testResource>
  </testResources>
</build>          

2. In properties file write following (create .properties in src/test/resources) 
(config.properties)
uName=${username}
Pwd=${password}

3. Read the properties file and fetch data and use in testCases
loginTest.java 
 Properties prop = new Properties();
 prop.load(loginTest.class.getclassLoader().getResourceAsStream("MyProject.properties"));    //another technique to load the .properties file and load the class as well
//LoginTest.java is the file  where we have written the configuration of the property file
 String uName = prop.getProperty("uName");
 String pass = prop.getProperty("Pwd");

WebElement userName = driver.findElement(By.xpath(""));
WebElement password = driver.findElement(By.xpath(""));
username.sendKeys(uName);
password.sendKeys(pass);

4. command : mvn -Dusername=wrishi05 -Dpassword=creative clean install 
************************************************
### How to create executable jar files from maven project ###

Approach1:
from mvn package -> the jar which gets created is not executable. we have to import jar plugin in pom.xml
<build>
  <plugins>
     <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId><maven-jar-plugin></artifactId>
        <configuration>
           <archive>
              <manifest>
                 <addClasspath>true</addClasspath>
                 <mainClass>com.qa.main.MainRunner</mainClass>
              </manifest>
           </archive>
        </configuration>
     </plugin>
  </plugins>
</build>

Approach2:
right click project < export < Java-Runnable jar file < select maven projec from 'launch configuratuions'
< in export destination , browse any destination < In Library handling - 
Exract required libraries into generated JAR < save & finish 

now on running mvn package -> .jar will be created in target repo
executing jar file -> cd ./target 
                      java -jar project.jar


### How to Run TestNG.xml file under main method ###
project structure:
src/test/java -> com.qa.main -> MainRunner.java

class MainRunner 
{
     static TestNG testNG;
  public static void main(String[] args)
  {
         testNG = new TestNG();
         String path = System.getProperty("user.dir") + "/testng.xml";
         List<String> list = new ArrayList<String>();
         list.add(path);
         testNG.setTestSuites(list);  //this method accepts list object so we will pass testNG.xml file path object
         //we can also run seperate testclasses as following 
         testNG.setTestClasses(new Class[] {LoginPageTest.class , HomepageTest.class}); //this method will accept array of classes
         testNG.run();
  }

}

#We can have multiple pom.xml in our Project

By default , maven will search for pom.xml , if this not there it will throw exception 
But we can have pom1.xml & pom2.xml 
command : mvn -f pom1.xml clean install



